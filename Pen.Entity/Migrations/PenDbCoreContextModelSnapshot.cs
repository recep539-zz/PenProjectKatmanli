// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pen.Entity.Data;

#nullable disable

namespace Pen.Entity.Migrations
{
    [DbContext(typeof(PenDbCoreContext))]
    partial class PenDbCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pen.Entity.Data.BodyMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bodymaterial1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Bodymaterial");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BodyMaterials");
                });

            modelBuilder.Entity("Pen.Entity.Data.Covertype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Covertypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Covertype", (string)null);
                });

            modelBuilder.Entity("Pen.Entity.Data.FillingMechanism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FillingMechanisms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FillingMechanism", (string)null);
                });

            modelBuilder.Entity("Pen.Entity.Data.FountainPen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FountainPenTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FountainPen", (string)null);
                });

            modelBuilder.Entity("Pen.Entity.Data.PenInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BodyMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CapClosedPenLength")
                        .HasColumnType("int");

                    b.Property<int>("CapLength")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CovertypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DiameterOfThePen")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FillingMechanismId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PenImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PenImage1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PenImage2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenLengthExcludingCap")
                        .HasColumnType("int");

                    b.Property<int>("PenStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BodyMaterialId" }, "IX_PenInformation_BodyMaterialId");

                    b.HasIndex(new[] { "CovertypeId" }, "IX_PenInformation_CovertypeId");

                    b.HasIndex(new[] { "FillingMechanismId" }, "IX_PenInformation_FillingMechanismId");

                    b.HasIndex(new[] { "PenStatusId" }, "IX_PenInformation_PenStatusId");

                    b.HasIndex(new[] { "TipTypeId" }, "IX_PenInformation_TipTypeId");

                    b.ToTable("PenInformation", (string)null);
                });

            modelBuilder.Entity("Pen.Entity.Data.PenStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Penstatus1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Penstatus");

                    b.HasKey("Id");

                    b.ToTable("PenStatus", (string)null);
                });

            modelBuilder.Entity("Pen.Entity.Data.TipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("TipType1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TipType");

                    b.HasKey("Id");

                    b.ToTable("TipTypes");
                });

            modelBuilder.Entity("Pen.Entity.Data.PenInformation", b =>
                {
                    b.HasOne("Pen.Entity.Data.BodyMaterial", "BodyMaterial")
                        .WithMany("PenInformations")
                        .HasForeignKey("BodyMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pen.Entity.Data.Covertype", "Covertype")
                        .WithMany("PenInformations")
                        .HasForeignKey("CovertypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pen.Entity.Data.FillingMechanism", "FillingMechanism")
                        .WithMany("PenInformations")
                        .HasForeignKey("FillingMechanismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pen.Entity.Data.PenStatus", "PenStatus")
                        .WithMany("PenInformations")
                        .HasForeignKey("PenStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pen.Entity.Data.TipType", "TipType")
                        .WithMany("PenInformations")
                        .HasForeignKey("TipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyMaterial");

                    b.Navigation("Covertype");

                    b.Navigation("FillingMechanism");

                    b.Navigation("PenStatus");

                    b.Navigation("TipType");
                });

            modelBuilder.Entity("Pen.Entity.Data.BodyMaterial", b =>
                {
                    b.Navigation("PenInformations");
                });

            modelBuilder.Entity("Pen.Entity.Data.Covertype", b =>
                {
                    b.Navigation("PenInformations");
                });

            modelBuilder.Entity("Pen.Entity.Data.FillingMechanism", b =>
                {
                    b.Navigation("PenInformations");
                });

            modelBuilder.Entity("Pen.Entity.Data.PenStatus", b =>
                {
                    b.Navigation("PenInformations");
                });

            modelBuilder.Entity("Pen.Entity.Data.TipType", b =>
                {
                    b.Navigation("PenInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
